#!/usr/bin/env python3
"""
D√©monstration Osiris - Collecteur Forensique Multi-OS
"""

import sys
import json
import time
from datetime import datetime
from pathlib import Path

def print_banner():
    """Affiche la banni√®re Osiris"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë                    üöÄ OSIRIS FORENSICS üöÄ                    ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë           Collecteur Forensique Multi-OS Professionnel      ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë              Windows ‚Ä¢ Linux ‚Ä¢ macOS                         ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def print_section(title):
    """Affiche une section avec style"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_success(message):
    """Affiche un message de succ√®s"""
    print(f"‚úÖ {message}")

def print_info(message):
    """Affiche un message d'information"""
    print(f"‚ÑπÔ∏è  {message}")

def print_warning(message):
    """Affiche un message d'avertissement"""
    print(f"‚ö†Ô∏è  {message}")

def demo_system_info():
    """D√©monstration des informations syst√®me"""
    print_section("INFORMATIONS SYST√àME")
    
    try:
        from collectors import get_system_info
        info = get_system_info()
        
        print_success(f"Plateforme d√©tect√©e: {info['platform']}")
        print_success(f"Plateformes disponibles: {', '.join(info['available_platforms'])}")
        print_success(f"Nombre total de collecteurs: {info['collectors_count']}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_collectors_list():
    """D√©monstration de la liste des collecteurs"""
    print_section("COLLECTEURS DISPONIBLES")
    
    try:
        from collectors import list_collectors
        collectors = list_collectors()
        
        for platform, collector_list in collectors.items():
            print_success(f"{platform.upper()}: {len(collector_list)} collecteurs")
            for collector in collector_list:
                print(f"   ‚Ä¢ {collector}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_single_collector():
    """D√©monstration d'un collecteur simple"""
    print_section("TEST D'UN COLLECTEUR")
    
    try:
        from collectors import collect_specific
        print_info("Test du collecteur 'users'...")
        
        start_time = time.time()
        results = collect_specific('auto', 'users')
        end_time = time.time()
        
        if 'system_info' in results:
            print_success(f"Collecteur ex√©cut√© en {end_time - start_time:.2f}s")
            print_success(f"Plateforme: {results['system_info']['platform']}")
            print_success(f"Utilisateur: {results['system_info']['current_user']}")
            
            if 'error' in results:
                print_warning("Mode d√©grad√© (normal sans privil√®ges admin)")
            else:
                print_success("Mode complet")
            
            return True
        else:
            print(f"‚ùå Structure de donn√©es invalide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_quick_scan():
    """D√©monstration d'un scan rapide"""
    print_section("SCAN RAPIDE")
    
    try:
        from collectors import collect_all
        print_info("Lancement d'un scan rapide...")
        
        start_time = time.time()
        results = collect_all()
        end_time = time.time()
        
        print_success(f"Scan termin√© en {end_time - start_time:.2f}s")
        
        # Analyse des r√©sultats
        successful_collectors = 0
        failed_collectors = 0
        
        for collector_name, result in results.items():
            if isinstance(result, dict) and 'error' not in result:
                successful_collectors += 1
            else:
                failed_collectors += 1
        
        print_success(f"Collecteurs r√©ussis: {successful_collectors}")
        if failed_collectors > 0:
            print_warning(f"Collecteurs en mode d√©grad√©: {failed_collectors}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_output_generation():
    """D√©monstration de la g√©n√©ration de sortie"""
    print_section("G√âN√âRATION DE SORTIE")
    
    try:
        from collectors import collect_specific
        results = collect_specific('auto', 'users')
        
        # Cr√©ation du dossier de sortie
        output_dir = Path("output")
        output_dir.mkdir(exist_ok=True)
        
        # G√©n√©ration du fichier JSON
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = output_dir / f"osiris_demo_{timestamp}.json"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print_success(f"Fichier g√©n√©r√©: {output_file}")
        print_info(f"Taille: {output_file.stat().st_size} octets")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def print_summary():
    """Affiche le r√©sum√© de la d√©monstration"""
    print_section("R√âSUM√â")
    
    summary = """
    üéâ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS !
    
    ‚úÖ Osiris est op√©rationnel et pr√™t √† l'emploi
    ‚úÖ Portabilit√© multi-OS confirm√©e
    ‚úÖ Gestion d'erreurs robuste
    ‚úÖ Structure de donn√©es coh√©rente
    ‚úÖ Interface utilisateur intuitive
    
    üöÄ PROCHAINES √âTAPES :
    
    1. Pour une collecte compl√®te, ex√©cutez en tant qu'administrateur
    2. Utilisez 'python osiris_cli.py --help' pour voir toutes les options
    3. Consultez le README.md pour la documentation compl√®te
    4. Ajoutez vos propres collecteurs personnalis√©s
    
    üí° ASTUCES :
    
    ‚Ä¢ Mode d√©grad√© : Fonctionne sans privil√®ges admin (donn√©es limit√©es)
    ‚Ä¢ Mode complet : Ex√©cutez en tant qu'administrateur pour toutes les donn√©es
    ‚Ä¢ Tests : Utilisez 'python test_osiris_simple.py' pour valider l'installation
    ‚Ä¢ Logs : D√©finissez OSIRIS_LOG_LEVEL=DEBUG pour plus de d√©tails
    
    üîß SUPPORT :
    
    ‚Ä¢ Documentation : README.md
    ‚Ä¢ Tests : test_osiris_*.py
    ‚Ä¢ CLI : osiris_cli.py
    ‚Ä¢ Code source : collectors/
    """
    
    print(summary)

def main():
    """Fonction principale de d√©monstration"""
    print_banner()
    
    print_info("D√©marrage de la d√©monstration Osiris...")
    print_info("Cette d√©monstration teste les fonctionnalit√©s principales")
    
    # Tests s√©quentiels
    tests = [
        ("Informations syst√®me", demo_system_info),
        ("Liste des collecteurs", demo_collectors_list),
        ("Test d'un collecteur", demo_single_collector),
        ("Scan rapide", demo_quick_scan),
        ("G√©n√©ration de sortie", demo_output_generation)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed_tests += 1
            else:
                print_warning(f"Test '{test_name}' a √©chou√©")
        except Exception as e:
            print(f"‚ùå Erreur dans le test '{test_name}': {e}")
    
    print_section("R√âSULTATS")
    print_success(f"Tests r√©ussis: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print_summary()
        return True
    else:
        print_warning("Certains tests ont √©chou√©. Consultez les logs pour plus de d√©tails.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 